.TH "/home/christopher/Documents/lsm9ds1/inc/lsm9ds1.h" 3 "Wed Jul 3 2019" "Version 0.1.0-alpha" "LSM9DS1 Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/christopher/Documents/lsm9ds1/inc/lsm9ds1.h \- Functions to access the lsm9ds1\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'lsm9ds1_mag\&.h'\fP
.br
\fC#include 'lsm9ds1_gyro\&.h'\fP
.br
\fC#include 'lsm9ds1_accel\&.h'\fP
.br
\fC#include 'lsm9ds1_error\&.h'\fP
.br
\fC#include 'lsm9ds1_regs\&.h'\fP
.br
\fC#include 'lsm9ds1_bus\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBlsm9ds1_settings\fP"
.br
.ti -1c
.RI "struct \fBlsm9ds1_data_t\fP"
.br
.ti -1c
.RI "struct \fBlsm9ds1_converted_data_t\fP"
.br
.ti -1c
.RI "struct \fBlsm9ds1_device_t\fP"
.br
.RI "Store data and configurations for the lsm9ds1 device\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_BUILD_VERSION\fP   BUILD_VERSION"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef int16_t \fBlsm9ds1_temperature_t\fP"
.br
.RI "Temperature returned from the LSM9DS1\&. "
.ti -1c
.RI "typedef struct \fBlsm9ds1_settings\fP \fBlsm9ds1_settings_t\fP"
.br
.ti -1c
.RI "typedef struct \fBlsm9ds1_data_t\fP \fBlsm9ds1_data_t\fP"
.br
.ti -1c
.RI "typedef struct \fBlsm9ds1_converted_data_t\fP \fBlsm9ds1_converted_data_t\fP"
.br
.ti -1c
.RI "typedef struct \fBlsm9ds1_device_t\fP \fBlsm9ds1_device_t\fP"
.br
.RI "Store data and configurations for the lsm9ds1 device\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "lsm9ds1_status_t \fBupdate_temp\fP (\fBlsm9ds1_device_t\fP *self)"
.br
.RI "Read the temperature of the LSM9DS1\&. "
.ti -1c
.RI "lsm9ds1_status_t \fBupdate_accel\fP (\fBlsm9ds1_device_t\fP *self)"
.br
.RI "Read the accelerometer of the LSM9DS1\&. "
.ti -1c
.RI "lsm9ds1_status_t \fBupdate_mag\fP (\fBlsm9ds1_device_t\fP *self)"
.br
.RI "Read the magnetometer of the LSM9DS1\&. "
.ti -1c
.RI "lsm9ds1_status_t \fBupdate_gyro\fP (\fBlsm9ds1_device_t\fP *self)"
.br
.RI "Read the gyroscope from the LSM9DS1\&. "
.ti -1c
.RI "lsm9ds1_status_t \fBlsm9ds1_init\fP (\fBlsm9ds1_device_t\fP *self, lsm9ds1_xfer_bus_t bus_type, lsm9ds1_accel_range_t range, lsm9ds1_mag_gain_t gain, lsm9ds1_gyro_scale_t scale)"
.br
.RI "Initialize the LSM9DS1\&. "
.in -1c
.SH "Detailed Description"
.PP 
Functions to access the lsm9ds1\&. 


.PP
\fBAuthor:\fP
.RS 4
Christopher Jordan-Denny 
.RE
.PP
\fBDate:\fP
.RS 4
Initializes the LSM9DS1 for the Raspberry Pi 3B+\&. Currently the device is wired to the first spi device\&. Sets up the magnetometer, accelerometer and gyroscope\&. Provides functions to read and write the data collected on the LSM9DS1\&. 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBlsm9ds1_device_t\fP  \fBlsm9ds1_device_t\fP"

.PP
Store data and configurations for the lsm9ds1 device\&. This structure stores all the information pertaining to the lsm9ds1\&.
.IP "\(bu" 2
Bus configuration (SPI/I2C) information
.IP "\(bu" 2
Gyroscope configuration information
.IP "\(bu" 2
Magnetometer configuration information
.IP "\(bu" 2
Accelerometer configuration information 
.PP

.SH "Function Documentation"
.PP 
.SS "lsm9ds1_status_t lsm9ds1_init (\fBlsm9ds1_device_t\fP * self, lsm9ds1_xfer_bus_t bus_type, lsm9ds1_accel_range_t range, lsm9ds1_mag_gain_t gain, lsm9ds1_gyro_scale_t scale)"

.PP
Initialize the LSM9DS1\&. TODO Add description of initialization
.PP
Example Usage: 
.PP
.nf
#include <lsm9ds1\&.h>

int main() {
      lsm9ds1_status_t status = LSM9DS1_UNKNOWN_ERROR;

      lsm9ds1 = malloc(sizeof(lsm9ds1_device_t));
      status = lsm9ds1_init(lsm9ds1, LSM9DS1_SPI_BUS, LSM9DS1_ACCELRANGE_8G, LSM9DS1_MAGGAIN_8GAUSS, LSM9DS1_GYROSCALE_500DPS);
      if(status < 0) {
          fprinf(stderr, "Error initializing lsm9ds1!\n");
      }

      free(lsm9ds1);
}

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIself\fP The created instance of the \fBlsm9ds1_device_t\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the function status\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_status_t\fP 
.PP
\fBlsm9ds1_device_t\fP 
.PP
\fBlsm9ds1_xfer_bus_t\fP 
.PP
\fBlsm9ds1_accel_range_t\fP 
.SH "lsm9ds1_mag_gain_t"
.PP
.PP
\fBlsm9ds1_gyro_scale_t\fP 
.RE
.PP

.SS "lsm9ds1_status_t update_accel (\fBlsm9ds1_device_t\fP * self)"

.PP
Read the accelerometer of the LSM9DS1\&. Updates the \fBlsm9ds1_device_t\fP structure with the current accelerometer reading\&. You must first create this structure before reading\&.
.PP
Example Usage: 
.PP
.nf
#include <lsm9ds1\&.h>

int main() {
        lsm9ds1_status_t status = LSM9DS1_UNKNOWN_ERROR;

    lsm9ds1 = malloc(sizeof(lsm9ds1_device_t));
    status = lsm9ds1_init(lsm9ds1, LSM9DS1_SPI_BUS, LSM9DS1_ACCELRANGE_8G, LSM9DS1_MAGGAIN_8GAUSS, LSM9DS1_GYROSCALE_500DPS);
    if(status < 0) {
        fprinf(stderr, "Error initializing lsm9ds1!\n");
    }

        status = lsm9ds1\&.update_accel(lsm9ds1);
        if(status < 0) {
            fprintf(stderr, "Error reading accelerometer!\n");
        }

    free(lsm9ds1);
}

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIself\fP The created instance of the \fBlsm9ds1_device_t\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the function status\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_status_t\fP 
.PP
\fBlsm9ds1_device_t\fP 
.RE
.PP
\fBNote:\fP
.RS 4
You must first initialize the lsm9ds1\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_init\fP 
.RE
.PP

.SS "lsm9ds1_status_t update_gyro (\fBlsm9ds1_device_t\fP * self)"

.PP
Read the gyroscope from the LSM9DS1\&. Updates the \fBlsm9ds1_device_t\fP structure with the current gyroscope reading\&. You must first create this structure before reading\&.
.PP
Example Usage: 
.PP
.nf
#include <lsm9ds1\&.h>

int main() {
        lsm9ds1_status_t status = LSM9DS1_UNKNOWN_ERROR;

    lsm9ds1 = malloc(sizeof(lsm9ds1_device_t));
    status = lsm9ds1_init(lsm9ds1, LSM9DS1_SPI_BUS, LSM9DS1_ACCELRANGE_8G, LSM9DS1_MAGGAIN_8GAUSS, LSM9DS1_GYROSCALE_500DPS);
    if(status < 0) {
        fprinf(stderr, "Error initializing lsm9ds1!\n");
    }

        status = lsm9ds1\&.update_accel(lsm9ds1);
        if(status < 0) {
            fprintf(stderr, "Error reading gyroscope!\n");
        }

    free(lsm9ds1);
}

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIself\fP The created instance of the \fBlsm9ds1_device_t\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the function status\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_status_t\fP 
.PP
\fBlsm9ds1_device_t\fP 
.RE
.PP
\fBNote:\fP
.RS 4
You must first initialize the lsm9ds1\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_init\fP 
.RE
.PP

.SS "lsm9ds1_status_t update_mag (\fBlsm9ds1_device_t\fP * self)"

.PP
Read the magnetometer of the LSM9DS1\&. Updates the \fBlsm9ds1_device_t\fP structure with the current magnetometer reading\&. You must first create this structure before reading\&.
.PP
Example Usage: 
.PP
.nf
#include <lsm9ds1\&.h>

int main() {
        lsm9ds1_status_t status = LSM9DS1_UNKNOWN_ERROR;

    lsm9ds1 = malloc(sizeof(lsm9ds1_device_t));
    status = lsm9ds1_init(lsm9ds1, LSM9DS1_SPI_BUS, LSM9DS1_ACCELRANGE_8G, LSM9DS1_MAGGAIN_8GAUSS, LSM9DS1_GYROSCALE_500DPS);
    if(status < 0) {
        fprinf(stderr, "Error initializing lsm9ds1!\n");
    }

        status = lsm9ds1\&.update_mag(lsm9ds1);
        if(status < 0) {
            fprintf(stderr, "Error reading magnetometer!\n");
        }

    free(lsm9ds1);
}

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIself\fP The created instance of the \fBlsm9ds1_device_t\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the function status\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_status_t\fP 
.PP
\fBlsm9ds1_device_t\fP 
.RE
.PP
\fBNote:\fP
.RS 4
You must first initialize the lsm9ds1\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_init\fP 
.RE
.PP

.SS "lsm9ds1_status_t update_temp (\fBlsm9ds1_device_t\fP * self)"

.PP
Read the temperature of the LSM9DS1\&. Updates the \fBlsm9ds1_device_t\fP structure with the current temperature\&. You must first create this structure before reading\&.
.PP
Example Usage: 
.PP
.nf
#include <lsm9ds1\&.h>

int main() {
        lsm9ds1_status_t status = LSM9DS1_UNKNOWN_ERROR;

    lsm9ds1 = malloc(sizeof(lsm9ds1_device_t));
    status = lsm9ds1_init(lsm9ds1, LSM9DS1_SPI_BUS, LSM9DS1_ACCELRANGE_8G, LSM9DS1_MAGGAIN_8GAUSS, LSM9DS1_GYROSCALE_500DPS);
    if(status < 0) {
        fprinf(stderr, "Error initializing lsm9ds1!\n");
    }

        status = lsm9ds1\&.update_temp(lsm9ds1);
        if(status < 0) {
            fprintf(stderr, "Error reading temperature!\n");
        }

    free(lsm9ds1);
}

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIself\fP The created instance of the \fBlsm9ds1_device_t\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the function status\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_status_t\fP 
.PP
\fBlsm9ds1_device_t\fP 
.RE
.PP
\fBNote:\fP
.RS 4
You must first initialize the lsm9ds1\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_init\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for LSM9DS1 Library from the source code\&.
