.TH "/home/christopher/Documents/lsm9ds1/inc/lsm9ds1.h" 3 "Tue Aug 27 2019" "Version 0.7.0-alpha" "LSM9DS1 Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/christopher/Documents/lsm9ds1/inc/lsm9ds1.h \- Functions to access the lsm9ds1\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'lsm9ds1_debug\&.h'\fP
.br
\fC#include 'lsm9ds1_config\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBlsm9ds1_data_t\fP"
.br
.RI "Stores the raw data for each sub device\&. "
.ti -1c
.RI "struct \fBaccelerometer_converted_data_t\fP"
.br
.ti -1c
.RI "struct \fBmag_converted_data_t\fP"
.br
.ti -1c
.RI "struct \fBgyro_converted_data_t\fP"
.br
.ti -1c
.RI "struct \fBlsm9ds1_converted_data_t\fP"
.br
.RI "Stores the converted data for each sub device\&. "
.ti -1c
.RI "struct \fBlsm9ds1_device_t\fP"
.br
.RI "Data and configurations for the lsm9ds1 device\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_BUILD_VERSION\fP   BUILD_VERSION"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBlsm9ds1_data_t\fP \fBlsm9ds1_data_t\fP"
.br
.RI "Stores the raw data for each sub device\&. "
.ti -1c
.RI "typedef struct \fBaccelerometer_converted_data_t\fP \fBaccelerometer_converted_data_t\fP"
.br
.ti -1c
.RI "typedef struct \fBmag_converted_data_t\fP \fBmag_converted_data_t\fP"
.br
.ti -1c
.RI "typedef struct \fBgyro_converted_data_t\fP \fBgyro_converted_data_t\fP"
.br
.ti -1c
.RI "typedef struct \fBlsm9ds1_converted_data_t\fP \fBlsm9ds1_converted_data_t\fP"
.br
.RI "Stores the converted data for each sub device\&. "
.ti -1c
.RI "typedef struct \fBlsm9ds1_device_t\fP \fBlsm9ds1_device_t\fP"
.br
.RI "Data and configurations for the lsm9ds1 device\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBlsm9ds1_status_t\fP \fBget_temp\fP (lsm9ds1_temperature_t *temperature)"
.br
.RI "Read the temperature of the LSM9DS1\&. "
.ti -1c
.RI "\fBlsm9ds1_status_t\fP \fBget_accel\fP (\fBaccelerometer_converted_data_t\fP *data)"
.br
.RI "Read the accelerometer of the LSM9DS1\&. "
.ti -1c
.RI "\fBlsm9ds1_status_t\fP \fBget_mag\fP (\fBmag_converted_data_t\fP *data)"
.br
.RI "Read the magnetometer of the LSM9DS1\&. "
.ti -1c
.RI "\fBlsm9ds1_status_t\fP \fBget_gyro\fP (\fBgyro_converted_data_t\fP *data)"
.br
.RI "Read the gyroscope from the LSM9DS1\&. "
.ti -1c
.RI "\fBlsm9ds1_status_t\fP \fBlsm9ds1_init\fP ()"
.br
.RI "Initialize the LSM9DS1\&. "
.ti -1c
.RI "\fBlsm9ds1_status_t\fP \fBlsm9ds1_close\fP ()"
.br
.RI "Close the LSM9DS1\&. "
.in -1c
.SH "Detailed Description"
.PP 
Functions to access the lsm9ds1\&. 


.PP
\fBAuthor:\fP
.RS 4
Christopher Jordan-Denny 
.RE
.PP
\fBDate:\fP
.RS 4
Initializes the LSM9DS1 for the Raspberry Pi 3B+\&. Currently the device is wired to the first spi device\&. Sets up the magnetometer, accelerometer and gyroscope\&. Provides functions to read and write the data collected on the LSM9DS1\&. 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "\fBlsm9ds1_status_t\fP get_accel (\fBaccelerometer_converted_data_t\fP * data)"

.PP
Read the accelerometer of the LSM9DS1\&. Get the current converted accelerometer reading\&. The X, Y and Z coordinates are returned by this function\&.
.PP
Example Usage: 
.PP
.nf
#include <lsm9ds1\&.h>

int main() {
        lsm9ds1_status_t status = LSM9DS1_UNKNOWN_ERROR;

    status = lsm9ds1_init();
    if(status < 0) {
        fprinf(stderr, "Error initializing lsm9ds1!\n");
    }

    accelerometer_converted_data_t data = {0};
        status = get_accel(&data);
        if(status < 0) {
            fprintf(stderr, "Error reading accelerometer!\n");
        }

    printf("Accelerometer x: %f\n", data\&.x);
    printf("Accelerometer y: %f\n", data\&.y);
    printf("Accelerometer z: %f\n", data\&.z);

    return status;
}

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP the converted data read from the accelerometer\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBaccelerometer_converted_data_t\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the function status as defined in \fBlsm9ds1_status_t\fP\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_status_t\fP 
.RE
.PP
\fBNote:\fP
.RS 4
You must first initialize the lsm9ds1\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_init\fP 
.RE
.PP

.SS "\fBlsm9ds1_status_t\fP get_gyro (\fBgyro_converted_data_t\fP * data)"

.PP
Read the gyroscope from the LSM9DS1\&. Get the current converted gyroscope reading\&. The X, Y and Z coordinates are returned by this function\&.
.PP
Example Usage: 
.PP
.nf
#include <lsm9ds1\&.h>

int main() {
        lsm9ds1_status_t status = LSM9DS1_UNKNOWN_ERROR;

    status = lsm9ds1_init();
    if(status < 0) {
        fprinf(stderr, "Error initializing lsm9ds1!\n");
    }

    gyro_converted_data_t data = {0};
        status = get_gyro(&data);
        if(status < 0) {
            fprintf(stderr, "Error reading gyroscope!\n");
        }

    printf("Gyroscope x: %f\n", data\&.x);
    printf("Gyroscope y: %f\n", data\&.y);
    printf("Gyroscope z: %f\n", data\&.z);

    return status;
}

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP the converted data read from the gyroscope\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBgyro_converted_data_t\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the function status as defined in \fBlsm9ds1_status_t\fP\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_status_t\fP 
.RE
.PP
\fBNote:\fP
.RS 4
You must first initialize the lsm9ds1\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_init\fP 
.RE
.PP

.SS "\fBlsm9ds1_status_t\fP get_mag (\fBmag_converted_data_t\fP * data)"

.PP
Read the magnetometer of the LSM9DS1\&. Get the current converted magnetometer reading\&. The X, Y and Z coordinates are returned by this function\&.
.PP
Example Usage: 
.PP
.nf
#include <lsm9ds1\&.h>

int main() {
        lsm9ds1_status_t status = LSM9DS1_UNKNOWN_ERROR;

    status = lsm9ds1_init();
    if(status < 0) {
        fprinf(stderr, "Error initializing lsm9ds1!\n");
    }
    mag_converted_data_t data = {0};
        status = get_mag(&data);
        if(status < 0) {
            fprintf(stderr, "Error reading magnetometer!\n");
        }

    printf("Magnetometer x: %f\n", data\&.x);
    printf("Magnetometer y: %f\n", data\&.y);
    printf("Magnetometer z: %f\n", data\&.z);
    
    return status;
}

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP the converted data read from the magnetometer\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBmag_converted_data_t\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the function status as defined in \fBlsm9ds1_status_t\fP\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_status_t\fP 
.RE
.PP
\fBNote:\fP
.RS 4
You must first initialize the lsm9ds1\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_init\fP 
.RE
.PP

.SS "\fBlsm9ds1_status_t\fP get_temp (lsm9ds1_temperature_t * temperature)"

.PP
Read the temperature of the LSM9DS1\&. Get the current converted temperature reading
.PP
Example Usage: 
.PP
.nf
#include <lsm9ds1\&.h>

int main() {
        lsm9ds1_status_t status = LSM9DS1_UNKNOWN_ERROR;

    status = lsm9ds1_init();
    if(status < 0) {
        fprinf(stderr, "Error initializing lsm9ds1!\n");
    }

    lsm9ds1_temperature_t data = 0;
        status = get_temp(&data);
        if(status < 0) {
            fprintf(stderr, "Error reading temperature!\n");
        }

    printf("Temperature: %f\n", data);

    return status;
}

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP the converted data read from the temperature monitor 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_temperature_t\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the function status as defined in \fBlsm9ds1_status_t\fP\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_status_t\fP 
.RE
.PP
\fBNote:\fP
.RS 4
You must first initialize the lsm9ds1\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_init\fP 
.RE
.PP

.SS "\fBlsm9ds1_status_t\fP lsm9ds1_close ()"

.PP
Close the LSM9DS1\&. Close the open buses\&.
.PP
Example Usage: 
.PP
.nf
#include <lsm9ds1\&.h>

int main() {
        lsm9ds1_status_t status = LSM9DS1_UNKNOWN_ERROR;

    status = lsm9ds1_init();
    if(status < 0) {
        fprinf(stderr, "Error initializing lsm9ds1!\n");
    }

    status = lsm9ds1_close();
    if(status < 0) {
        fprinf(stderr, "Error closing lsm9ds1!\n");
    }

    return status;
}

.fi
.PP
 
.PP
\fBReturns:\fP
.RS 4
Returns the function status as defined in \fBlsm9ds1_status_t\fP\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_status_t\fP 
.RE
.PP

.SS "\fBlsm9ds1_status_t\fP lsm9ds1_init ()"

.PP
Initialize the LSM9DS1\&. Initialize the lsm9ds1 according to the configuration file found in /etc/lsm9ds1\&.json\&. This function only has to be called once\&.
.PP
Example Usage: 
.PP
.nf
#include <lsm9ds1\&.h>

int main() {
        lsm9ds1_status_t status = LSM9DS1_UNKNOWN_ERROR;

    status = lsm9ds1_init();
    if(status < 0) {
        fprinf(stderr, "Error initializing lsm9ds1!\n");
    }

    return status;
}

.fi
.PP
 
.PP
\fBReturns:\fP
.RS 4
Returns the function status as defined in \fBlsm9ds1_status_t\fP\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlsm9ds1_status_t\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for LSM9DS1 Library from the source code\&.
